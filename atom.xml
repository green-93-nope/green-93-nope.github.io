<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Summer is Green</title>
  <subtitle>a blog for writing and thinking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://summerisgreen.com/"/>
  <updated>2017-07-28T04:06:02.316Z</updated>
  <id>http://summerisgreen.com/</id>
  
  <author>
    <name>Green</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法技巧-使用动态规划解决地图路径类问题</title>
    <link href="http://summerisgreen.com/blog/2017-07-27-2017-07-27-%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B3%E5%9C%B0%E5%9B%BE%E8%B7%AF%E5%BE%84%E7%B1%BB%E9%97%AE%E9%A2%98.html"/>
    <id>http://summerisgreen.com/blog/2017-07-27-2017-07-27-算法技巧-使用动态规划解决地图路径类问题.html</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2017-07-28T04:06:02.316Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-org56e4fd7" class="outline-2">
<h2 id="org56e4fd7">栅格化的有向图类问题</h2>
<div class="outline-text-2" id="text-org56e4fd7">
<p>
对于图论的路径寻找问题，比较经典的解法就是Dijkstra 和 A*算法了。
这两种方法虽然通用，但编码实现比较复杂。
如果对这类问题中比较简单的一些问题也采用这种解法的话，就有点用大炮打蚊子的感觉了。
</p>

<p>
这里面的一类简单问题就是在栅格化了的有向图中进行搜索，因为其探索路径比较固定，一般为向右和向下，
所以可以直接使用动态规划来进行求解。
</p>

<p>
下面将结合leetcode题目来进行具体的讲解。
</p>
</div>
</div>
<div id="outline-container-org7ee0300" class="outline-2">
<h2 id="org7ee0300">Minimum Path Sum</h2>
<div class="outline-text-2" id="text-org7ee0300">
<pre class="example">
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
</pre>

<p>
对于最短路径问题，假设我们有一个 \(m*n\) 的cost矩阵，这个矩阵中每个点表示的是从起始点到该点的最小路径的值。
矩阵中值的迭代过程可以使用下面的公式来表示：\(cost(i,j) = min(cost(i-1,j), cost(i,j-1)) + grid[i][j]\) 。
有了这个迭代公式，我们就可以使用动态规划方法来求解这个最短路径的问题了。
</p>

<p>
在编码之前，我们通过观察可以发现，在实际计算cost时，我们只需要当前行中的前一列中的元素和前一行中当前列的元素，
因此我们实际需要的只是两个n维向量而不是 \(m*n\) 的矩阵。
我们将这两个向量命名为 pre 和 cur，它们分别表示前一行和当前行向量。
利用这两个向量，我们将之前的迭代公式转化为：$cur(j) = min(cur(j-1),pre(j)) + grid[i][j]$。
</p>

<p>
在编码求解该问题的过程中，一个比较麻烦的细节就是对边界问题的处理了。
可以使用的一个技巧就是给这两个向量的头部增加一个节点作为哨兵节点。
这里将 cur 的第一个节点设置为 $&infin;$，保证最左端的节点只会采用从前一行过来的路径。
而第一行需要特殊处理，因为他们都只存在从左边过来的路径，这里将 pre 的第一个元素设置为0，从而保证了元素值的正确性。
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">minPathSum</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, grid<span style="color: #4f97d7;">)</span>:
    <span style="color: #2aa1ae;">"""</span>
<span style="color: #2aa1ae;">    :type grid: List[List[int]]</span>
<span style="color: #2aa1ae;">    :rtype: int</span>
<span style="color: #2aa1ae;">    """</span>
    <span style="color: #7590db;">height</span>, <span style="color: #7590db;">length</span> = <span style="color: #4f97d7;">len</span><span style="color: #4f97d7;">(</span>grid<span style="color: #4f97d7;">)</span>, <span style="color: #4f97d7;">len</span><span style="color: #4f97d7;">(</span>grid<span style="color: #bc6ec5;">[</span><span style="color: #a45bad;">0</span><span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>length+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">cur</span> = <span style="color: #4f97d7;">[</span><span style="color: #4f97d7;">float</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">"inf"</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>length+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>length<span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">pre</span><span style="color: #4f97d7;">[</span>i+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = pre<span style="color: #4f97d7;">[</span>i<span style="color: #4f97d7;">]</span> + grid<span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">][</span>i<span style="color: #4f97d7;">]</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span>, height<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">for</span> j <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>length<span style="color: #4f97d7;">)</span>:
            <span style="color: #7590db;">cur</span><span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = <span style="color: #4f97d7;">min</span><span style="color: #4f97d7;">(</span>cur<span style="color: #bc6ec5;">[</span>j<span style="color: #bc6ec5;">]</span>, pre<span style="color: #bc6ec5;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span> + grid<span style="color: #4f97d7;">[</span>i<span style="color: #4f97d7;">][</span>j<span style="color: #4f97d7;">]</span>
        <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span>i <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> cur<span style="color: #4f97d7;">]</span>
    <span style="color: #4f97d7; font-weight: bold;">return</span> pre<span style="color: #4f97d7;">[</span>length<span style="color: #4f97d7;">]</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org54a7b99" class="outline-2">
<h2 id="org54a7b99">Unique Paths</h2>
<div class="outline-text-2" id="text-org54a7b99">
<pre class="example">
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
</pre>

<p>
这个问题的基本迭代公式为 $paths(i,j) = paths(i-1,j) + paths(i,j-1)$，其解决思路和上一题的一致，只是初始化和边界条件的设置更加简单。
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">uniquePaths</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, m, n<span style="color: #4f97d7;">)</span>:
    <span style="color: #2aa1ae;">"""</span>
<span style="color: #2aa1ae;">    :type m: int</span>
<span style="color: #2aa1ae;">    :type n: int</span>
<span style="color: #2aa1ae;">    :rtype: int</span>
<span style="color: #2aa1ae;">    """</span>
    <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>n+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">cur</span> = <span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>n+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> j <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>n<span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">pre</span><span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = <span style="color: #a45bad;">1</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span>,m<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">for</span> j <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>n<span style="color: #4f97d7;">)</span>:
            <span style="color: #7590db;">cur</span><span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = cur<span style="color: #4f97d7;">[</span>j<span style="color: #4f97d7;">]</span> + pre<span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span>
        <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span>mem <span style="color: #4f97d7; font-weight: bold;">for</span> mem <span style="color: #4f97d7; font-weight: bold;">in</span> cur<span style="color: #4f97d7;">]</span>
    <span style="color: #4f97d7; font-weight: bold;">return</span> pre<span style="color: #4f97d7;">[</span>n<span style="color: #4f97d7;">]</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org7bd04af" class="outline-2">
<h2 id="org7bd04af">Unique Paths II</h2>
<div class="outline-text-2" id="text-org7bd04af">
<pre class="example">
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.
</pre>

<p>
如果路径中是存在障碍物的话，基本思路和之前的题目依旧相同，只是要在每个迭代中加一个将障碍物点上的路径值设为0的语句即可。
具体的解法如下面的Python代码所示。
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">uniquePathsWithObstacles</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, obstacleGrid<span style="color: #4f97d7;">)</span>:
    <span style="color: #2aa1ae;">"""</span>
<span style="color: #2aa1ae;">    :type obstacleGrid: List[List[int]]</span>
<span style="color: #2aa1ae;">    :rtype: int</span>
<span style="color: #2aa1ae;">    """</span>
    <span style="color: #7590db;">height</span>, <span style="color: #7590db;">length</span> = <span style="color: #4f97d7;">len</span><span style="color: #4f97d7;">(</span>obstacleGrid<span style="color: #4f97d7;">)</span>, <span style="color: #4f97d7;">len</span><span style="color: #4f97d7;">(</span>obstacleGrid<span style="color: #bc6ec5;">[</span><span style="color: #a45bad;">0</span><span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>length +<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">cur</span> = <span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> * <span style="color: #4f97d7;">(</span>length +<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">pre</span><span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">]</span> = <span style="color: #a45bad;">1</span>
    <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>length<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> obstacleGrid<span style="color: #4f97d7;">[</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">][</span>i<span style="color: #4f97d7;">]</span> == <span style="color: #a45bad;">1</span>:
            <span style="color: #7590db;">pre</span><span style="color: #4f97d7;">[</span>i+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = <span style="color: #a45bad;">0</span>
        <span style="color: #4f97d7; font-weight: bold;">else</span>:
            <span style="color: #7590db;">pre</span><span style="color: #4f97d7;">[</span>i+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = pre<span style="color: #4f97d7;">[</span>i<span style="color: #4f97d7;">]</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span>, height<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">for</span> j <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">range</span><span style="color: #4f97d7;">(</span>length<span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">if</span> obstacleGrid<span style="color: #4f97d7;">[</span>i<span style="color: #4f97d7;">][</span>j<span style="color: #4f97d7;">]</span> == <span style="color: #a45bad;">1</span>:
                <span style="color: #7590db;">cur</span><span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = <span style="color: #a45bad;">0</span>
            <span style="color: #4f97d7; font-weight: bold;">else</span>:
                <span style="color: #7590db;">cur</span><span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span> = cur<span style="color: #4f97d7;">[</span>j<span style="color: #4f97d7;">]</span> + pre<span style="color: #4f97d7;">[</span>j+<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span>

        <span style="color: #7590db;">pre</span> = <span style="color: #4f97d7;">[</span>i <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> cur<span style="color: #4f97d7;">]</span>
    <span style="color: #4f97d7; font-weight: bold;">return</span> pre<span style="color: #4f97d7;">[</span>-<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span>
</pre>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      
&lt;div id=&quot;outline-container-org56e4fd7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org56e4fd7&quot;&gt;栅格化的有向图类问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org56e4f
    
    </summary>
    
      <category term="编程技巧" scheme="http://summerisgreen.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://summerisgreen.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
      <category term="算法" scheme="http://summerisgreen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法技巧-backtracking</title>
    <link href="http://summerisgreen.com/blog/2017-07-07-2017-07-07-%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7-backtracking.html"/>
    <id>http://summerisgreen.com/blog/2017-07-07-2017-07-07-算法技巧-backtracking.html</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-07-28T04:05:12.523Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-org6f63efa" class="outline-2">
<h2 id="org6f63efa">Backtracking 算法</h2>
<div class="outline-text-2" id="text-org6f63efa">
<p>
Backtracking（回溯)法是一个实用性非常强的算法，
它的核心思想正如其名字所蕴含的意思：沿着之前走的路退回到上一个岔路口，然后选择另一条路继续探索。
除了回溯思想之外，该算法的另一个关键就是对何时进行回溯，何时结束算法进行判断，而对这个的具体实现又是和所遇到的问题相关联。
</p>

<p>
将这两个关键点结合起来之后，我们可以得到回溯算法的一个非形式化的描述：
在搜索过程中，按照自定义的规则在遭遇的分支中进行选择；当所选择的分支为不可行(或者已被完全搜索时)，退回到上一个分支的分叉点，并在未被选取过的分支中选择一个，然后继续搜索。
</p>

<p>
回溯算法不仅原理简单，而且应用十分广泛。
该算法最常见的一种变体就是十分有名的在图或树中寻找可行解的深度优先搜索算法(Depth First Search)。
</p>

<p>
回溯算法算法应用广泛的一个原因就是其可以针对不同形式的解来做适当的变形，
以进行求解。
回溯算法对于具有不同解的形式的问题的求解思路将在下面一一介绍。
</p>
</div>
</div>
<div id="outline-container-org9489fc8" class="outline-2">
<h2 id="org9489fc8">回溯算法的应用</h2>
<div class="outline-text-2" id="text-org9489fc8">
<p>
在对回溯算法的实际编码过程中，由于递归调用的存在，可以很优雅的方式将回溯算法表示出来，而不需要实现复杂的回撤操作。
</p>

<p>
回溯算法最常见的应用是用来在有限的搜索集中寻找下面三种形式的解：
</p>
<ul class="org-ul">
<li>可行解</li>
<li>最优解</li>
<li>所有解</li>
</ul>

<p>
对于前两类问题，它们的问题形式比较固定，其求解过程直接套用下面介绍的思路即可。
而对查找所有可行解的问题，由于通常会需要去除冗余解并对求解过程进行加速，需要针对具体的需求进行适当的变形。
</p>
</div>
<div id="outline-container-org3b5b83e" class="outline-3">
<h3 id="org3b5b83e">可行解思路</h3>
<div class="outline-text-3" id="text-org3b5b83e">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">solve</span><span style="color: #4f97d7;">(</span>node, path<span style="color: #4f97d7;">)</span>:
    <span style="color: #7590db;">path</span> += <span style="color: #4f97d7;">[</span>node<span style="color: #4f97d7;">]</span>
    <span style="color: #4f97d7; font-weight: bold;">if</span> leave?<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> path <span style="color: #4f97d7; font-weight: bold;">if</span> satisfy?<span style="color: #4f97d7;">(</span>path<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">else</span> <span style="color: #a45bad;">None</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> c <span style="color: #4f97d7; font-weight: bold;">in</span> choice<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">ans</span> = solve<span style="color: #4f97d7;">(</span>c, path<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> ans <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">return</span> ans

    <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #a45bad;">None</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org0b46871" class="outline-3">
<h3 id="org0b46871">最优解思路</h3>
<div class="outline-text-3" id="text-org0b46871">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #7590db;">best</span> = -<span style="color: #4f97d7;">float</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"inf"</span><span style="color: #4f97d7;">)</span>

<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">find_best</span><span style="color: #4f97d7;">(</span>node, path<span style="color: #4f97d7;">)</span>:
    <span style="color: #7590db;">path</span> += <span style="color: #4f97d7;">[</span>node<span style="color: #4f97d7;">]</span>
    <span style="color: #4f97d7; font-weight: bold;">if</span> leave?<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> satisfy?<span style="color: #4f97d7;">(</span>path<span style="color: #4f97d7;">)</span>:
            <span style="color: #7590db;">best</span> = <span style="color: #4f97d7;">max</span><span style="color: #4f97d7;">(</span>best, score<span style="color: #bc6ec5;">(</span>node<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">return</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> c <span style="color: #4f97d7; font-weight: bold;">in</span> choice<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        find_best<span style="color: #4f97d7;">(</span>c, path<span style="color: #4f97d7;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgedb5741" class="outline-3">
<h3 id="orgedb5741">寻找存在的所有解</h3>
<div class="outline-text-3" id="text-orgedb5741">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #7590db;">ans</span> = <span style="color: #4f97d7;">[]</span>

<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">find_all</span><span style="color: #4f97d7;">(</span>node, path<span style="color: #4f97d7;">)</span>:
    <span style="color: #7590db;">path</span> += node
    <span style="color: #4f97d7; font-weight: bold;">if</span> leave?<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> satisfy?<span style="color: #4f97d7;">(</span>path<span style="color: #4f97d7;">)</span>:
            <span style="color: #7590db;">ans</span> += path

        <span style="color: #4f97d7; font-weight: bold;">return</span>

    <span style="color: #4f97d7; font-weight: bold;">for</span> c <span style="color: #4f97d7; font-weight: bold;">in</span> choice<span style="color: #4f97d7;">(</span>node<span style="color: #4f97d7;">)</span>:
        find_all<span style="color: #4f97d7;">(</span>c, path<span style="color: #4f97d7;">)</span>

</pre>
</div>

<p>
对于寻找存在的所有解的问题，一般不仅需要找到所有解，还要求找到的解不能重复;
为了满足这个需求需要增加一些额外的操作，具体将结合下面这个来自 leetcode 的题目进行说明。
</p>
</div>
<div id="outline-container-org4e98912" class="outline-4">
<h4 id="org4e98912">Combination Sum II</h4>
<div class="outline-text-4" id="text-org4e98912">
<pre class="example">
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination. 
</pre>

<p>
该题目的难点就是如何高效地找出所有不重复的结果。
</p>

<p>
首先需要做的是对整个原始数据进行排序，
因为这用可以方便后面过滤掉重复的结果，并且可以使得后续的运算时间减少一个常数因子（为之前的几分之一）。
而这个方法对整个程序的时间效率的影响不大，对候选对象的排序的时间复杂度为 \(O(n * lg(n))\)
和整个搜索过程的时间复杂度(\(O(n^2)\))不是一个量级上的。
</p>

<p>
在之前的解算思路上还添加了 e &lt;= target and (i &lt; 1 or candidates[i] != candidates[i-1]) 这个判定条件。
这个条件的前面部分减少了搜索的计算量，后面部分则在当前分叉点上跳过与之前相同的选择保证了搜索结果的不重复。
</p>

<p>
搜索结果的不重复性可以通过对递归式 csIter 进行循环不变式分析来证明。
</p>

<ul class="org-ul">
<li>循环不变式：相同长度的 comb ，其值不相同。</li>
<li>初始化：第一次迭代之前，长度为0的 comb，不包含任何值。成立。</li>
<li>保持：假设当 comb 中元素个数为 n 时，之前计算出的 comb 不重复，对于满足条件 i &lt; 1 or candidates[i] != candidates[i-1] 的结果，其添加的新元素能保证新的 comb 不重复。因此完成此步添加操作的 comb不会产生重复。</li>
<li>终止：当循环终止时，长度相同的 comb 中的值不同。</li>
</ul>

<p>
所以对于最终结果中的解，不是不同的长度的值，要不就是相同的长度但不重复的值，所以其结果必然不重复。
</p>

<p>
看了上面的推理，对于重复性的问题应该是解决了，但是可能会引发另一个担忧：过滤掉了这些条件，会不会导致最终的结果不完整。
为了消除这个疑虑，只要证明过滤掉的搜索结果都是在现有结果中已有的即可。
对于去除的元素，其满足下面的条件：i &gt; 0 并且 candidates[i] == candidates[i-1]。
也就是说去除的潜在对象是作为新符合条件的候选项，已经在子程序中添加过到 comb 中的。
而当前的 comb 和前一个潜在对象的时候相同，并且当前的潜在对象是之前的潜在对象的子集，
因此该条件下产生的结果是之前的结果的子集。
所有过滤掉判定条件之后的结果依然是完整的。
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">combinationSum2</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, candidates, target<span style="color: #4f97d7;">)</span>:
    <span style="color: #2aa1ae;">"""</span>
<span style="color: #2aa1ae;">    :type candidates: List[int]</span>
<span style="color: #2aa1ae;">    :type target: int</span>
<span style="color: #2aa1ae;">    :rtype: List[List[int]]</span>
<span style="color: #2aa1ae;">    """</span>
    <span style="color: #7590db;">ans</span> = <span style="color: #4f97d7;">[]</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">csIter</span><span style="color: #4f97d7;">(</span>candidates, target, comb<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> target == <span style="color: #a45bad;">0</span>:
            ans.append<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span>i <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> comb<span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">for</span> i, e <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">enumerate</span><span style="color: #4f97d7;">(</span>candidates<span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">if</span> e &lt;= target <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span>i &lt; <span style="color: #a45bad;">1</span> <span style="color: #4f97d7; font-weight: bold;">or</span> candidates<span style="color: #bc6ec5;">[</span>i<span style="color: #bc6ec5;">]</span> != candidates<span style="color: #bc6ec5;">[</span>i-<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>:
                comb.append<span style="color: #4f97d7;">(</span>e<span style="color: #4f97d7;">)</span>
                csIter<span style="color: #4f97d7;">(</span>candidates<span style="color: #bc6ec5;">[</span>i+<span style="color: #a45bad;">1</span>:<span style="color: #bc6ec5;">]</span>, target-e, comb<span style="color: #4f97d7;">)</span>
                comb.pop<span style="color: #4f97d7;">()</span>
    csIter<span style="color: #4f97d7;">(</span><span style="color: #4f97d7;">sorted</span><span style="color: #bc6ec5;">(</span>candidates<span style="color: #bc6ec5;">)</span>, target, <span style="color: #bc6ec5;">[]</span><span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">return</span> ans
</pre>
</div>

<p>
在 leetcode 上的另一个中档难度的题可以采用和本题相同的技巧来解决，其问题及解法如下所示。
</p>
</div>
</div>

<div id="outline-container-orge66ad13" class="outline-4">
<h4 id="orge66ad13">Subsets II</h4>
<div class="outline-text-4" id="text-orge66ad13">
<pre class="example">
Given a collection of integers that might contain duplicates, nums, return all possible subsets. 
</pre>

<p>
该题目除了没有了 target 目标的约束之外，和之前的题目类似。
在实际求解的过程中，只要将之前的解放中和 target 相关的表达式删去即可。
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">subsetsWithDup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, nums<span style="color: #4f97d7;">)</span>:
    <span style="color: #2aa1ae;">"""</span>
<span style="color: #2aa1ae;">    :type nums: List[int]</span>
<span style="color: #2aa1ae;">    :rtype: List[List[int]]</span>
<span style="color: #2aa1ae;">    """</span>
    <span style="color: #7590db;">ans</span> = <span style="color: #4f97d7;">[]</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">swdIter</span><span style="color: #4f97d7;">(</span>candidates, comb<span style="color: #4f97d7;">)</span>:
        ans.append<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span>i <span style="color: #4f97d7; font-weight: bold;">for</span> i <span style="color: #4f97d7; font-weight: bold;">in</span> comb<span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">for</span> i, e <span style="color: #4f97d7; font-weight: bold;">in</span> <span style="color: #4f97d7;">enumerate</span><span style="color: #4f97d7;">(</span>candidates<span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">if</span> i &lt; <span style="color: #a45bad;">1</span> <span style="color: #4f97d7; font-weight: bold;">or</span> candidates<span style="color: #4f97d7;">[</span>i<span style="color: #4f97d7;">]</span> != candidates<span style="color: #4f97d7;">[</span>i-<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">]</span>:
                comb.append<span style="color: #4f97d7;">(</span>e<span style="color: #4f97d7;">)</span>
                swdIter<span style="color: #4f97d7;">(</span>candidates<span style="color: #bc6ec5;">[</span>i+<span style="color: #a45bad;">1</span>:<span style="color: #bc6ec5;">]</span>, comb<span style="color: #4f97d7;">)</span>
                comb.pop<span style="color: #4f97d7;">()</span>
    swdIter<span style="color: #4f97d7;">(</span><span style="color: #4f97d7;">sorted</span><span style="color: #bc6ec5;">(</span>nums<span style="color: #bc6ec5;">)</span>, <span style="color: #bc6ec5;">[]</span><span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">return</span> ans
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org4e712c8" class="outline-2">
<h2 id="org4e712c8">参考</h2>
<div class="outline-text-2" id="text-org4e712c8">
<ol class="org-ol">
<li><a href="https://segmentfault.com/a/1190000006121957" target="_blank" rel="external">(Leetcode) Backtracking回溯法(又称DFS,递归)全解</a></li>
<li><a href="https://leetcode.com/problems/combination-sum-ii/#/description" target="_blank" rel="external">leetcode Combination Sum II</a></li>
<li><a href="https://leetcode.com/problems/subsets-ii/#/description" target="_blank" rel="external">leetcode Subsets II</a></li>
</ol>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      
&lt;div id=&quot;outline-container-org6f63efa&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6f63efa&quot;&gt;Backtracking 算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org
    
    </summary>
    
      <category term="编程技巧" scheme="http://summerisgreen.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://summerisgreen.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
      <category term="算法" scheme="http://summerisgreen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>巧用异或找出唯一出现奇数次的数字</title>
    <link href="http://summerisgreen.com/blog/2016-11-26-2016-11-26-%E5%B7%A7%E7%94%A8%E5%BC%82%E6%88%96%E6%89%BE%E5%87%BA%E5%94%AF%E4%B8%80%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.html"/>
    <id>http://summerisgreen.com/blog/2016-11-26-2016-11-26-巧用异或找出唯一出现奇数次的数字.html</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2017-07-28T04:00:12.256Z</updated>
    
    <content type="html"><![CDATA[<p>
异或操作看似是数字逻辑的一个很简单的运算方法，
但却具有一些很有用的特性，用好的话，对一些问题的解决可以起到四两拨千斤的效果。
<a id="more"></a>
</p>

<div id="outline-container-org8222f41" class="outline-2">
<h2 id="org8222f41">异或方法的基本原理</h2>
<div class="outline-text-2" id="text-org8222f41">
<p>
在维基百科中异或是这样定义的：在数字逻辑中，逻辑算符互斥（exclusive or）是对两个运算元的一种逻辑分析类型。
而基于二进制的计算机中的信息操作就可以看作是一堆进行数字逻辑操作的信息。
这也是异或操作在计算机中的运算速度非常快的一个原因。
</p>

<p>
在数字逻辑中的运算方法有很多，而异或方法却能产生一些看似很奇妙的应用，
这主要是因为它具有的数学上的一些特性：
</p>
<ul class="org-ul">
<li>交换率：A^B=B^A</li>
<li>结合率：A^B^C=A^(B^C)</li>
<li>归零率：A^A=0</li>
<li>自反：A^B^B=A</li>
</ul>
</div>
</div>


<div id="outline-container-org2ab7899" class="outline-2">
<h2 id="org2ab7899">异或方法的一些简单的应用</h2>
<div class="outline-text-2" id="text-org2ab7899">
<p>
知道了异或的数学性质之后，就可以发现下面两道题目使用异或操作非常简单了。
</p>
</div>

<div id="outline-container-org7e0bb9a" class="outline-3">
<h3 id="org7e0bb9a">快速比较两个数的值是否相等</h3>
<div class="outline-text-3" id="text-org7e0bb9a">
<p>
在对时间和空间效率要求非常高的计算机底层编程中，
经常会看到有汇编程序利用异或的归零率的特性，快速比较两个数的值是否相等。
</p>

<div class="org-src-container">
<pre class="src src-python">a^b == <span style="color: #a45bad;">0</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd01cc32" class="outline-3">
<h3 id="orgd01cc32">不使用其他空间交换两个数的值</h3>
<div class="outline-text-3" id="text-orgd01cc32">
<p>
应用异或操作的自反的性质，就可以在不使用额外空间的前提下交换两个数的值。
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #7590db;">a</span> = a^b
<span style="color: #7590db;">b</span> = a^b
<span style="color: #7590db;">a</span> = a^b
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgc24af93" class="outline-2">
<h2 id="orgc24af93">一些奇妙的应用</h2>
<div class="outline-text-2" id="text-orgc24af93">
<p>
除了在上面这些简单的问题上，可以使用异或操作的小技巧，并且使程序的时间和空间效率得到改善以外。
异或方法还可以在一些较为复杂的问题上得到应用，
比如下面将会介绍的用来在一组数中找出唯一一个只出现了奇数次的数字这一系列问题。
</p>
</div>

<div id="outline-container-org458b751" class="outline-3">
<h3 id="org458b751">校招之找出未打卡员工题</h3>
<div class="outline-text-3" id="text-org458b751">
<p>
某互联网公司的一道很简单的校招笔试题目，使用异或可以很优雅地解决。
</p>

<pre class="example">
题目：输入两行数据，第一行为全部员工的 id，第二行为某一天打卡的员工 id，
已知只有一个员工没有打卡，求出未打卡员工的 id。（员工 id 不重复，每行输入的 id 未排序）

输入：
1001 1003 1002 1005 1004
1002 1003 1001 1004

输出：
1005
</pre>
</div>
</div>

<div id="outline-container-org2e6b0be" class="outline-3">
<h3 id="org2e6b0be">leetcode之Single Number III</h3>
<div class="outline-text-3" id="text-org2e6b0be">
<p>
之前在leetcode上也看到过一个使用异或方法来解决将会变得非常简单的一道题目，其最终的时间和空间复杂度分别为O(n)和O(1)。
</p>

<pre class="example">
Given an array of numbers nums,
in which exactly two elements appear only once and
all the other elements appear exactly twice.

Find the two elements that appear only once.
</pre>

<p>
<!-- more -->
</p>
</div>
</div>
</div>

<div id="outline-container-orgdc3ba09" class="outline-2">
<h2 id="orgdc3ba09">参考</h2>
<div class="outline-text-2" id="text-orgdc3ba09">
<p>
<a href="https://en.wikipedia.org/wiki/Exclusive_or" target="_blank" rel="external">Exclusive or</a>
</p>

<p>
<a href="https://www.lijinma.com/blog/2014/05/29/amazing-xor/" target="_blank" rel="external">感受异或的神奇</a>
</p>

<p>
<a href="http://www.alijava.com/campus-interview/" target="_blank" rel="external">2017互联网校招的一些面试题</a>
</p>

<p>
<a href="https://leetcode.com/problems/single-number-iii/" target="_blank" rel="external">Single Number III</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
异或操作看似是数字逻辑的一个很简单的运算方法，
但却具有一些很有用的特性，用好的话，对一些问题的解决可以起到四两拨千斤的效果。
    
    </summary>
    
      <category term="编程技巧" scheme="http://summerisgreen.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="编程技巧" scheme="http://summerisgreen.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
      <category term="算法" scheme="http://summerisgreen.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo和emacs-Org来写博客</title>
    <link href="http://summerisgreen.com/blog/2016-09-30-2016-09-30-%E4%BD%BF%E7%94%A8hexo%E5%92%8Cemacs-org%E6%9D%A5%E5%86%99%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://summerisgreen.com/blog/2016-09-30-2016-09-30-使用hexo和emacs-org来写博客.html</id>
    <published>2016-09-29T16:00:00.000Z</published>
    <updated>2017-07-07T04:11:07.748Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-orgc80d512" class="outline-2">
<h2 id="orgc80d512">使用org-mode来写博客</h2>
<div class="outline-text-2" id="text-orgc80d512">
<p>
最近闲着部署了一个静态博客，开启了自己的博客生涯，
采用的方案是目前最流行的 Github Pages + Hexo 。
使用 Hexo 博客框架可以方便快捷地完成部署，发布的功能，不过其只默认支持解析 markdown 格式的文章。
作为一个 emacs 用户，习惯于使用功能变态级强大的 org-mode 来写文档，自然也想要让自己的博客能够直接支持解析 org 格式文件。
对于这项任务，google了下发现已经有人做了 org-octopress 这个插件来支持 org-mode 写博客，
emacs 丰富的开源插件果然是很强大。
</p>
</div>

<div id="outline-container-orgaad4fb4" class="outline-3">
<h3 id="orgaad4fb4">配置org-octopress</h3>
<div class="outline-text-3" id="text-orgaad4fb4">
<p>
为了配置该功能，首先从Melpa软件仓库中安装org-octopress，并添加下面的代码设置你的文章发布功能。
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">require</span> '<span style="color: #a45bad;">org-octopress</span><span style="color: #4f97d7;">)</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> org-octopress-directory-top       <span style="color: #2d9574;">"~/YourBlogDirectory"</span><span style="color: #4f97d7;">)</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> org-octopress-directory-posts     <span style="color: #2d9574;">"~/YourBlogDirectory/source/_posts"</span><span style="color: #4f97d7;">)</span> <span style="color: #2aa1ae; background-color: #292e34;">;</span><span style="color: #2aa1ae; background-color: #292e34;">&#25991;&#31456;&#21457;&#24067;&#30446;&#24405;</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> org-octopress-directory-org-top   <span style="color: #2d9574;">"~/YourBlogDirectory"</span><span style="color: #4f97d7;">)</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> org-octopress-directory-org-posts <span style="color: #2d9574;">"~/YourBlogDirectory/blog"</span><span style="color: #4f97d7;">)</span> <span style="color: #2aa1ae; background-color: #292e34;">;</span><span style="color: #2aa1ae; background-color: #292e34;">org&#25991;&#31456;&#30446;&#24405;</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">setq</span> org-octopress-setup-file          <span style="color: #2d9574;">"~/YourBlogDirectory/setupfile.org"</span><span style="color: #4f97d7;">)</span>

</pre>
</div>

<p>
其中的具体目录可以依据自己的实际情况进行修改，
在这里 top 指定的是博客的根目录；posts 为发布成 html 格式的文章所在的目录；
org-posts 为你使用 org 模式写的博客所在的目录；
org-top 为 org 博客的上一级别目录。
</p>

<p>
完成了之前的设定之后，你需要修改博客目录下的 _config.yml，以便适配 org-octopress 解析成的 html 博客文件：
</p>
<pre class="example">
permalink: /blog/:year-:month-:day-:title.html
</pre>

<p>
接下来，你就可以使用 org-octopress 功能，此时会进入一个博客文章管理的 buffer，在这里面可以轻松地添加、修改或删除博客文章。
</p>

<p>
最后，当你写完博客以后，org-export-dispatch 中的 Publish 选项中来选择导出当前的博客文章或者整个 octopress 工程。
如果你想要预览你的文章的效果，你可以使用 prodigy 来快速查看，具体配置及使用可见 <a href="#org54fcaf6">下一章节</a>。
</p>
</div>
</div>

<div id="outline-container-orge1c7d63" class="outline-3">
<h3 id="orge1c7d63">org博客中引用图片</h3>
<div class="outline-text-3" id="text-orge1c7d63">
<p>
为了避免在 org-mode 输出为 html 的过程中，图片引用路径产生问题，
需要在 emacs 的配置文件中加入下面的代码来在 org-mode 中注册一种新的图片引用格式。
</p>
<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">require</span> '<span style="color: #a45bad;">ox-publish</span><span style="color: #4f97d7;">)</span>
<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">defun</span> <span style="color: #bc6ec5; font-weight: bold;">org-custom-link-img-follow</span> <span style="color: #bc6ec5;">(</span>path<span style="color: #bc6ec5;">)</span>
  <span style="color: #bc6ec5;">(</span>org-open-file-with-emacs
   <span style="color: #2d9574;">(</span>format <span style="color: #2d9574;">"../source/img/%s"</span> path<span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>   <span style="color: #2aa1ae; background-color: #292e34;">;</span><span style="color: #2aa1ae; background-color: #292e34;">the path of the image in local dic</span>

<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">defun</span> <span style="color: #bc6ec5; font-weight: bold;">org-custom-link-img-export</span> <span style="color: #bc6ec5;">(</span>path desc format<span style="color: #bc6ec5;">)</span>
  <span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">cond</span>
   <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>eq format 'html<span style="color: #67b11d;">)</span>
    <span style="color: #67b11d;">(</span>format <span style="color: #2d9574;">"&lt;img src=\"/img/%s\" alt=\"%s\"/&gt;"</span> path desc<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span> <span style="color: #2aa1ae; background-color: #292e34;">;</span><span style="color: #2aa1ae; background-color: #292e34;">the path of the image in webserver</span>

<span style="color: #4f97d7;">(</span>org-add-link-type <span style="color: #2d9574;">"img"</span> 'org-custom-link-img-follow 'org-custom-link-img-export<span style="color: #4f97d7;">)</span>
</pre>
</div>
<p>
这两个路径所代表的图片存储位置分别是从 org 格式的文章所在的目录和 web 服务器的角度来看的。
如果使用该种配置方式，为了方便引用，建议将图片保存在 source 文件夹中。
</p>
</div>
</div>
</div>

<div id="outline-container-org64468c9" class="outline-2">
<h2 id="org64468c9">在emacs中启动服务器和部署博客</h2>
<div class="outline-text-2" id="text-org64468c9">
<p>
<a id="org54fcaf6"></a>
在 emacs 中启动外部服务的任务可以通过 Prodigy 这个插件提供的功能完成。
在 Melpa 中安装了该插件之后，添加下面的代码到你的配置文件后，就可以使用
 prodigy 来快速地进行本地调试(Hexo Server）和部署（Hexo Deploy）。
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #4f97d7;">(</span>prodigy-define-service
 <span style="color: #4f97d7;">:name</span> <span style="color: #2d9574;">"Hexo Server"</span>
 <span style="color: #4f97d7;">:command</span> <span style="color: #2d9574;">"hexo"</span>
 <span style="color: #4f97d7;">:args</span> '<span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">"server"</span><span style="color: #bc6ec5;">)</span>
 <span style="color: #4f97d7;">:cwd</span> <span style="color: #2d9574;">"~/YourBlogDirectory"</span>
 <span style="color: #4f97d7;">:tags</span> '<span style="color: #bc6ec5;">(</span>hexo server<span style="color: #bc6ec5;">)</span>
 <span style="color: #4f97d7;">:kill-signal</span> 'sigkill
 <span style="color: #4f97d7;">:kill-process-buffer-on-stop</span> t<span style="color: #4f97d7;">)</span>

<span style="color: #4f97d7;">(</span>prodigy-define-service
 <span style="color: #4f97d7;">:name</span> <span style="color: #2d9574;">"Hexo Deploy"</span>
 <span style="color: #4f97d7;">:command</span> <span style="color: #2d9574;">"hexo"</span>
 <span style="color: #4f97d7;">:args</span> '<span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">"deploy"</span> <span style="color: #2d9574;">"--generate"</span><span style="color: #bc6ec5;">)</span>
 <span style="color: #4f97d7;">:cwd</span> <span style="color: #2d9574;">"~/YourBlogDirectory"</span>
 <span style="color: #4f97d7;">:tags</span> '<span style="color: #bc6ec5;">(</span>hexo deploy<span style="color: #bc6ec5;">)</span>
 <span style="color: #4f97d7;">:kill-signal</span> 'sigkill
 <span style="color: #4f97d7;">:kill-process-buffer-on-stop</span> t<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
在 prodigy 模式下你可以通过s来启动所选服务，使用S来停止对应的服务，
该模式的详细的快捷键定义在 prodigy-mode-map 中，不过知道这两个就应该够用了。
</p>
</div>
</div>

<div id="outline-container-orgc4b3de7" class="outline-2">
<h2 id="orgc4b3de7">参考</h2>
<div class="outline-text-2" id="text-orgc4b3de7">
<p>
1.<a href="https://zilongshanren.com/blog/2015-07-19-add-org-mode-support.html" target="_blank" rel="external">使用 Org-mode 来写博客</a>
</p>

<p>
2.<a href="https://zilongshanren.com/blog/2015-08-02-migrate-blog-to-hexo.html" target="_blank" rel="external">迁移博客到 Hexo</a>
</p>

<p>
3.<a href="http://stackoverflow.com/questions/14684263/how-to-org-mode-image-absolute-path-of-export-html" target="_blank" rel="external">how to org mode image absolute path of export html</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-orgc80d512&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc80d512&quot;&gt;使用org-mode来写博客&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org
    
    </summary>
    
      <category term="emacs" scheme="http://summerisgreen.com/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://summerisgreen.com/tags/emacs/"/>
    
      <category term="blog" scheme="http://summerisgreen.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>arch下使用aria2下载资源</title>
    <link href="http://summerisgreen.com/blog/2016-09-25-2016-09-25-arch%E4%B8%8B%E4%BD%BF%E7%94%A8aria2%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90.html"/>
    <id>http://summerisgreen.com/blog/2016-09-25-2016-09-25-arch下使用aria2下载资源.html</id>
    <published>2016-09-24T16:00:00.000Z</published>
    <updated>2017-07-06T00:36:46.082Z</updated>
    
    <content type="html"><![CDATA[<p>
linux 中拥有大量的下载工具，不过没有一个像迅雷那样在windows中文世界中占有统治地位。
对于一般 linux 用户常用的下载工具，比如gnome和kde等桌面环境中自带的 utorrent 或 ktorrent ，
自身下载速度不快，还有着占用内存资源多，支持下载协议有限的缺点。对于追求简洁高效的系统的人来说，自然是难以接受的。
</p>

<p>
而 aria2 作为一个轻型的，多协议支持的下载工具，而且还拥有很多实用的扩展工具，
可以说是 linux 下一个杀手级的下载工具。
</p>

<p>
不过 aria2 不像一般的下载工具那样开箱即用；
它的安装和配置自定义的程度高，
并且是需要花点功夫来折腾下的，
可以说是一款偏 geek 的下载工具。
</p>

<div id="outline-container-org47f6d62" class="outline-2">
<h2 id="org47f6d62">aria2是什么？</h2>
<div class="outline-text-2" id="text-org47f6d62">
<p>
aria2是一款轻量级的、支持多协议的和多个下载源的下载工具，它能够支持HTTP/HTTPS，FTP，SFTP，BitTorrent以及Metalink这么多协议的下载。
具体介绍可参照<a href="https://aria2.github.io/" target="_blank" rel="external">aria2官网</a>。
</p>

<p>
除了丰富的协议支持，它还有两个非常惊艳的优点：一个是轻量级：占用内存空间十分少，通常只占用4-9MB。
另一个优势就是支持RPC界面远程控制，可以很方便的对被配置为服务器的主机进行下载管理。
可以说对于linux主机来说是一款绝佳的下载工具。
</p>

<p>
用了一段时间后，还是非常满意这个小巧易用的下载工具；
唯一的一点遗憾就是不能下载迅雷链接，每次搜老电影都只能找到迅雷链接的我真是快哭了。
</p>

<p>
体会到了aria2的强大了之后，就来看看正确安装并配置aria2。
</p>
</div>
</div>

<div id="outline-container-org81db842" class="outline-2">
<h2 id="org81db842">aria2的安装及配置</h2>
<div class="outline-text-2" id="text-org81db842">
</div><div id="outline-container-org942d845" class="outline-3">
<h3 id="org942d845">安装aria2</h3>
<div class="outline-text-3" id="text-org942d845">
<p>
aria2 作为 linux 下常用的下载工具，一般的发行版仓库中都会有该软件的包，可以使用包管理系统直接安装。
比如在 archlinux 中，可以使用如下的命令直接安装：
</p>

<div class="org-src-container">
<pre class="src src-bash">$ sudo pacman -S aria2
</pre>
</div>

<p>
此时已经可以直接通过命令行运行aria2来进行下载，不过并不推荐。
因为这样每次都需要使用命令行参数来对断点续传或者速度限制等功能进行说明，并且下载管理也是不太方便。
</p>

<p>
这里推荐使用配置文件启动aria2服务，再通过web图形前端进行管理的优秀实践。
</p>
</div>
</div>

<div id="outline-container-org5510491" class="outline-3">
<h3 id="org5510491">配置aria2</h3>
<div class="outline-text-3" id="text-org5510491">
<p>
配置文件主要用于你的RPC信息以及下载相关的速度，进度以及磁盘等信息的设置。具体可参考<a href="https://github.com/green-93-nope/myConfiguration/blob/master/aria2/aria2.conf" target="_blank" rel="external">我的配置</a>。
该配置文件一般放在$HOME/.aria2/aria2.conf中。
</p>

<p>
除了这个配置文件之外你还需要创建一个session.lock文件，用来管理下载历史。
该文件所放置的位置和配置文件中的input-file和save-session对应即可。
</p>

<p>
配置完成后运行下面的命令，即可启动aria2到后台。-D表示运行程序到后台。
假如你不确定自己的配置是否正确，你可以命令后不加-D来观察输出是否正确。
</p>

<div class="org-src-container">
<pre class="src src-bash">$ aria2c --conf-path=&lt;PATH&gt; -D
</pre>
</div>

<p>
如果你和我一样厌烦了每次都要输入这一大堆命令你可以使用alias别名或者写一个简单的脚本来简化你的输入。
</p>
</div>
</div>

<div id="outline-container-org2a2b316" class="outline-3">
<h3 id="org2a2b316">图形前端</h3>
<div class="outline-text-3" id="text-org2a2b316">
<p>
aria2本身并没有图形界面，不过可以通过一些开源的web图形前端来进行管理，也是非常方便的。
</p>

<p>
比较有名并且好用的图形前端主要有<a href="https://github.com/binux/yaaw" target="_blank" rel="external">YAAW</a> 和<a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="external">webui-aria2</a>。
我使用的是第二个。
</p>

<p>
这两款应用都已经在arch的AUR仓库中了，使用yaourt可以很方便的安装。比如：
</p>

<div class="org-src-container">
<pre class="src src-bash">$ sudo yaourt -S webui-aria2
</pre>
</div>

<p>
安装完成后在浏览器中打开<a href="http://ziahamza.github.io/webui-aria2/" target="_blank" rel="external">管理页面</a> 即可进行管理。
</p>
</div>
</div>

<div id="outline-container-org5eb2eeb" class="outline-3">
<h3 id="org5eb2eeb">更多</h3>
<div class="outline-text-3" id="text-org5eb2eeb">
<p>
对于中国用户还有个福音，那就是有人已经开发出了浏览器插件来支持直接下载百度云和迅雷离线的内容，是不是瞬间感觉到逼格慢慢。
</p>

<p>
1.下载百度云链接<a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="external">BaiduExporter</a>。
</p>

<p>
2.下载迅雷离线内容<a href="http://binux.github.io/ThunderLixianExporter/" target="_blank" rel="external">ThunderLixianExporter</a>
</p>
</div>
</div>
</div>

<div id="outline-container-org858ebf3" class="outline-2">
<h2 id="org858ebf3">参考</h2>
<div class="outline-text-2" id="text-org858ebf3">
<p>
1.<a href="http://blog.binux.me/2012/12/aria2-examples/" target="_blank" rel="external">aria2配置示例</a>
</p>

<p>
2.<a href="http://moflying.com/2016/06/05/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8aria2%E5%8F%8Awebui-aria2%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%E8%B5%84%E6%BA%90/" target="_blank" rel="external">如何使用aria2及webui-aria2下载百度云资源</a>
</p>

<p>
3.<a href="https://wiki.archlinux.org/index.php/Aria2" target="_blank" rel="external">aria2-archwiki</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
linux 中拥有大量的下载工具，不过没有一个像迅雷那样在windows中文世界中占有统治地位。
对于一般 linux 用户常用的下载工具，比如gnome和kde等桌面环境中自带的 utorrent 或 ktorrent ，
自身下载速度不快，还有着占用内存资源多，支持下
    
    </summary>
    
      <category term="archlinux" scheme="http://summerisgreen.com/categories/archlinux/"/>
    
    
      <category term="archlinux" scheme="http://summerisgreen.com/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>配置支持中文输入的emacsclient</title>
    <link href="http://summerisgreen.com/blog/2016-09-24-2016-09-24-%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E7%9A%84emacsclient.html"/>
    <id>http://summerisgreen.com/blog/2016-09-24-2016-09-24-配置支持中文输入的emacsclient.html</id>
    <published>2016-09-23T16:00:00.000Z</published>
    <updated>2017-07-06T00:42:14.496Z</updated>
    
    <content type="html"><![CDATA[<p>
因为习惯了 emacs 的高效编辑，所以一直想要将arch的默认编辑器设置为emacs。
然而 emacs 每次启动都要加载大量的配置文件，缓慢的打开速度使它很难作为快速的编辑工具来使用。
</p>

<p>
最近发现了一个非常不错的通过使用emacsclient来快速启动新的emacs窗口的解决方案。
并且通过一些额外的设置可以很好地支持中文输入。
</p>

<div id="outline-container-org03ed370" class="outline-2">
<h2 id="org03ed370">emacsclient</h2>
<div class="outline-text-2" id="text-org03ed370">
<p>
emacsclient 的原理十分简单，就是预先启动一个emacs作为守护进程，每次想要进行一个新的编辑时，就打开一个窗口并链接到守护进程。
这样就免去了最耗时的每次启动时的加载配置，十分快速的同时还拥有你自定义的配置。
</p>

<p>
对于emacs英文用户来说，在终端下直接运行如下命令即可打开终端下的或者带有图形界面的 emacs 客户端。
</p>

<div class="org-src-container">
<pre class="src src-bash">$ emacsclient -t -a <span style="color: #2d9574;">""</span>  <span style="color: #2aa1ae; background-color: #292e34;">#</span><span style="color: #2aa1ae; background-color: #292e34;">&#22312;&#32456;&#31471;&#20013;&#24320;&#21551;emacs</span>
$ emacsclient -nc -a <span style="color: #2d9574;">""</span>  <span style="color: #2aa1ae; background-color: #292e34;">#</span><span style="color: #2aa1ae; background-color: #292e34;">&#21551;&#21160;emacs&#22270;&#24418;&#30028;&#38754;</span>
</pre>
</div>
<p>
其中-a ""参数表示，当第一次运行这个命令时，它会把emacs当作守护进程来启动，之后就会一直驻留在后台。
等到再次使用 emacsclient 时，就会把新建的窗口链接到该守护程序实现快速启动。
</p>

<p>
但是对于中文用户来说，进入后就会发现会遇到中文乱码，fcitx 输入法无法被激活的问题。
不过可以通过下面这些额外的设置来解决这两个问题。
</p>
</div>
</div>

<div id="outline-container-org6d8c6e1" class="outline-2">
<h2 id="org6d8c6e1">新窗口中支持中文字体</h2>
<div class="outline-text-2" id="text-org6d8c6e1">
<p>
因为在 emacs 中关于界面和字体的设置只有在创建新的frame时才有效，而启动服务器的时候并没有创建frame。
所以要想在 emacsclient 中正确的显示中文字体必须要添加一些额外的设置。
</p>

<div class="org-src-container">
<pre class="src src-emacs">(setq window-system-default-frame-alist
      '(
        ;; if frame created on x display
        (x
         (menu-bar-lines . 1)
         (tool-bar-lines . nil)
         ;; mouse
         (mouse-wheel-mode . 1)
         (mouse-wheel-follow-mouse . t)
         (mouse-avoidance-mode . 'exile)
         ;; face 具体可以更换为系统支持的中文字体
         (font . "WenQuanYi Micro Hei Mono 12")
         )
        ;; if on term
        (nil
         (menu-bar-lines . 0) (tool-bar-lines . 0)
         ;; (background-color . "black")
         ;; (foreground-color . "white")
         )
        )
      )
</pre>
</div>

<p>
对于 spacemacs 用户来说，默认的配置已经解决了新窗口的字体问题，所以不需要再进行额外的设置了。
</p>
</div>
</div>

<div id="outline-container-orgbc72cff" class="outline-2">
<h2 id="orgbc72cff">用户环境变量配置</h2>
<div class="outline-text-2" id="text-orgbc72cff">
<p>
一般言系统环境中LC_CTYPE默认设置为英文，此时在Emacs上可能无法使用输入法。为了能够支持fcitx的输入，在启动Emacs时需要指定LC_CTYPE为zh_CN.UTF-8。
使用下面的命令进行，就可以使用支持fcitx中文输入的emacs:
</p>

<div class="org-src-container">
<pre class="src src-bash">$ <span style="color: #7590db;">LC_CTYPE</span>=zh_CN.UTF-8 emacs
</pre>
</div>

<p>
当然你还可以利用alias别名命令来简化命令的输入。
比如我就在自己的个人环境信息配置文件(.profile或者.bashrc)中加入如下信息。
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4f97d7;">alias</span> <span style="color: #7590db;">emacs</span>=<span style="color: #2d9574;">'LC_CTYPE=zh_CN.UTF-8 emacs'</span>
<span style="color: #4f97d7;">alias</span> <span style="color: #7590db;">em</span>=<span style="color: #2d9574;">'emacsclient -t -a ""'</span>  <span style="color: #2aa1ae; background-color: #292e34;">#</span><span style="color: #2aa1ae; background-color: #292e34;">&#22312;&#32456;&#31471;&#20013;&#24320;&#21551;emacs</span>
<span style="color: #4f97d7;">alias</span> <span style="color: #7590db;">emc</span>=<span style="color: #2d9574;">'LC_CTYPE=zh_CN.UTF-8 emacsclient -nc -a ""'</span>  <span style="color: #2aa1ae; background-color: #292e34;">#</span><span style="color: #2aa1ae; background-color: #292e34;">&#21551;&#21160;emacs&#22270;&#24418;&#30028;&#38754;</span>
<span style="color: #4f97d7;">export</span> <span style="color: #7590db;">EDITOR</span>=<span style="color: #2d9574;">"$(if [[ -n $DISPLAY ]]; then echo 'LC_CTYPE=zh_CN.UTF-8 emacsclient -a ""'; else echo 'vi'; fi)"</span>
</pre>
</div>

<p>
之后直接在终端下输入emc，就可以快速启动emacsclient的图形界面进行编辑了，就是这么简单哈。
</p>
</div>
</div>
<div id="outline-container-org20f07f0" class="outline-2">
<h2 id="org20f07f0">参考</h2>
<div class="outline-text-2" id="text-org20f07f0">
<p>
1.<a href="https://wiki.archlinux.org/index.php/Emacs_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">Emacs&#x2013;archwiki</a>
</p>

<p>
2.<a href="http://emacser.com/daemon.htm" target="_blank" rel="external">使用emacs daemon</a>
</p>

<p>
3.<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Emacs_.E6.97.A0.E6.B3.95.E4.BD.BF.E7.94.A8.E8.BE.93.E5.85.A5.E6.B3.95" target="_blank" rel="external">fcitx&#x2013;archlinux</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
因为习惯了 emacs 的高效编辑，所以一直想要将arch的默认编辑器设置为emacs。
然而 emacs 每次启动都要加载大量的配置文件，缓慢的打开速度使它很难作为快速的编辑工具来使用。
&lt;/p&gt;

&lt;p&gt;
最近发现了一个非常不错的通过使用emacsclient来快速启
    
    </summary>
    
      <category term="emacs" scheme="http://summerisgreen.com/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://summerisgreen.com/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>转投Archlinux</title>
    <link href="http://summerisgreen.com/blog/2016-09-06-2016-09-06-%E8%BD%AC%E6%8A%95archlinux.html"/>
    <id>http://summerisgreen.com/blog/2016-09-06-2016-09-06-转投archlinux.html</id>
    <published>2016-09-05T16:00:00.000Z</published>
    <updated>2017-07-06T00:33:43.109Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-orgfa2313a" class="outline-2">
<h2 id="orgfa2313a">为什么选择archlinux?</h2>
<div class="outline-text-2" id="text-orgfa2313a">
<p>
在使用 archlinux 之前，我还使用过 opensuse 和 ubuntu 这两款普及率比较高的 linux 发行版。
</p>

<p>
来自德国的linux发行版opensuse，采用了KDE的桌面环境，桌面简洁华丽, 还配有强大的包管理界面工具zypper。但却有着一些让你不得不放弃的缺点:
</p>
<ul class="org-ul">
<li>由于墙的封锁， 而opensuse国内的镜像源也不多，每次更新都会被它的慢性子给急死。</li>
<li>opensuse的包管理非常严格, 导致了很多软件包官方都不予支持。但就算这样，python-matplotlib这个科学计算必备的包竟然还出现了打包错误。。。</li>
<li>opensuse采用的kde桌面虽然是非常华丽， 但是bug率也是让人无法忍受, 时常会出现桌面崩溃的情况， 这对于作为日常工作使用的系统来说可以说是致命的缺陷。也正因此我继而选择改用ubuntu。</li>
</ul>

<p>
ubuntu作为linux世界最为人熟知的发行版了， 它拥有开箱即用，丰富的软件支持等相当给力的优点。
这些优点从win平台转来的新手十分容易上手，而且在日常的使用中也是让人非常省心的。
作为一个面向新手的发行版，在易用性上可以说是极其完美的。这也造成了后来我觉得archlinux安装过于麻烦而迟迟不愿尝试。
不过这个开箱即用的设计理念也却对想要尝试自己DRY的geek来说带来很多的问题:
</p>
<ul class="org-ul">
<li>作为一个想要提高生产力的程序员，如果你想要使用一些平铺式的窗口管理器，你会发现自己要解决大量的和ubuntu unity之间的冲突。</li>
<li>如果你又碰巧是emacs用户, 你会发现快捷绑定中又存在这大量的冲突，而其中又有一些通过搜索引擎也找不到有用的解决方案。</li>
</ul>

<p>
在成长为一个实用主义的程序员的过程中，我发现自己需要的是一个简单易用，而且又能很好地支持全键盘操作这种高生产力操作方式的操作系统。经过在google和知乎的一番调研，我最终选择了 archlinux。它除了满足我的需求之外，还有着以下几个优点：
</p>
</div>

<div id="outline-container-orge602d79" class="outline-3">
<h3 id="orge602d79">简洁</h3>
<div class="outline-text-3" id="text-orge602d79">
<p>
arch的哲学是Keep It Simple, Stupid。所以在初始安装时它只会安装一个无图像界面的基本系统。这也给arch用户极大的自由度以根据自己的考量或喜爱来DRY出自己的系统。
</p>
</div>
</div>

<div id="outline-container-org5e1f8a8" class="outline-3">
<h3 id="org5e1f8a8">包管理</h3>
<div class="outline-text-3" id="text-org5e1f8a8">
<p>
arch有着极其强大的包管理工具pacman，它的输出简单易懂而且十分规范，非常方便后期的解析。如果你仔细看过pacman的官方wiki，你就会发现如此惊艳的获取来自官方源的软件包并重新安装的命令：
</p>

<pre class="example">

comm -23 &lt;(pacman -Qeq|sort) &lt;(pacman -Qmq|sort) &gt; pkglist
sudo pacman -S $(&lt; pkglist)

</pre>

<p>
arch的官方软件仓库中的软件已经足够丰富了，具有一定用户量的软件都会有。如果你要用的确实是一些非常冷门的软件而在官方仓库中无法找到，那就试一下AUR仓库，你有很大的可能会满意而归。这是一个由用户者们自行管理的软件仓库，拥有非常丰富的软件资源，而且它的软件包管理也极其方便有 yaourt这种和pacman命令参数兼容的工具来提供管理服务。
</p>

<p>
arch的包管理还有一个很强大的优势就是镜像源多，更新速度极其快。
</p>
</div>
</div>

<div id="outline-container-org969c2f4" class="outline-3">
<h3 id="org969c2f4">Wiki</h3>
<div class="outline-text-3" id="text-org969c2f4">
<p>
arch还有一个对其他发行版的巨大优势就是极其非常完善的wiki，从系统的安装到应用的使用配置都有大量的wiki来进行指导，这也是为什么archlinux并不容易上手，但却有着庞大用户量的一个原因吧。
</p>
</div>
</div>
</div>

<div id="outline-container-org2ee238c" class="outline-2">
<h2 id="org2ee238c">arch之旅</h2>
<div class="outline-text-2" id="text-org2ee238c">
<p>
说到这，可能你对arch会开始感兴趣。不过如果要你使用它，你还是有一些抵触，因为你可能听说：
</p>

<p>
Q1: archlinux很难安装， 不是那种很爱折腾的人最好不要使用。
</p>

<p>
A1: archlinux的安装虽然不像ubuntu那样傻瓜式的简单， 但只要你按照官方的<a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="external">安装wiki</a> 的步骤一步步来，也并不难，只是需要点耐心了。当然如果你是和我一样的windows双系统使用者, 你还需要在安装启动引导前安装os-prober即可。
</p>

<p>
Q2: archlinux是滚动升级版本并且很容易滚挂。
</p>

<p>
A2: archlinux是滚动更新的， 如果用户平时不注意维护是很容易滚挂的，但是如果你是一个有心人，平时注意定期<a href="https://wiki.archlinux.org/index.php/System_maintenance_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="external">维护</a> 和<a href="https://wiki.archlinux.org/index.php/Full_system_backup_with_rsync_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)" target="_blank" rel="external">备份</a> ，并且在你每次更新系统前留意<a href="https://www.archlinux.org/feeds/news/" target="_blank" rel="external">archlinux新闻</a> 的话, 并不需要担心滚挂的问题。网上也有很多人，安装了一次后可以用上很多年，比ubuntu LTS版用的还长。
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      
&lt;div id=&quot;outline-container-orgfa2313a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfa2313a&quot;&gt;为什么选择archlinux?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org
    
    </summary>
    
      <category term="archlinux" scheme="http://summerisgreen.com/categories/archlinux/"/>
    
    
      <category term="archlinux" scheme="http://summerisgreen.com/tags/archlinux/"/>
    
  </entry>
  
</feed>
